import React, { useState, useEffect } from 'react';
import { 
  Plus, Edit, Trash2, Eye, Save, X, Calendar, MapPin, Clock, Users, 
  DollarSign, Image, Tag, Star, Upload, Copy, ExternalLink,
  BarChart3, TrendingUp, Filter, Search, Download, Settings,
  Shield, Crown, Sparkles, AlertCircle, CheckCircle, Camera
} from 'lucide-react';

// Login Component
const AdminLogin = ({ onLogin }) => {
  const [credentials, setCredentials] = useState({ username: '', password: '' });
  const [error, setError] = useState('');

  const handleLogin = (e) => {
    e.preventDefault();
    // Demo credentials - replace with real authentication
    if (credentials.username === 'admin' && credentials.password === 'boujee2025') {
      onLogin(true);
    } else {
      setError('Invalid credentials');
    }
  };

  return (
    <div className="min-h-screen bg-background flex items-center justify-center">
      <div className="card-luxury max-w-md w-full mx-4">
        <div className="text-center mb-8">
          <div className="text-4xl font-bold text-luxury mb-2">be</div>
          <h2 className="text-xl font-semibold text-white">Admin Dashboard</h2>
          <p className="text-gray-400 text-sm">Secure access for event organizers</p>
        </div>

        <form onSubmit={handleLogin} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-400 mb-2">Username</label>
            <input
              type="text"
              value={credentials.username}
              onChange={(e) => setCredentials({...credentials, username: e.target.value})}
              className="w-full px-4 py-3 bg-background border border-gray-700 rounded-lg focus:border-primary focus:outline-none transition-colors text-white"
              placeholder="Enter username"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-400 mb-2">Password</label>
            <input
              type="password"
              value={credentials.password}
              onChange={(e) => setCredentials({...credentials, password: e.target.value})}
              className="w-full px-4 py-3 bg-background border border-gray-700 rounded-lg focus:border-primary focus:outline-none transition-colors text-white"
              placeholder="Enter password"
              required
            />
          </div>
          {error && (
            <div className="text-red-500 text-sm">{error}</div>
          )}
          <button type="submit" className="btn-luxury w-full">
            <Shield className="w-4 h-4 mr-2" />
            Access Dashboard
          </button>
        </form>

        <div className="mt-6 p-4 bg-primary/10 rounded-lg border border-primary/30">
          <p className="text-xs text-gray-400 mb-2">Demo Credentials:</p>
          <p className="text-xs text-primary">Username: admin</p>
          <p className="text-xs text-primary">Password: boujee2025</p>
        </div>
      </div>
    </div>
  );
};

// Event Form Component
const EventForm = ({ event, onSave, onCancel }) => {
  const [formData, setFormData] = useState({
    title: '',
    subtitle: '',
    description: '',
    date: '',
    time: '',
    venue: '',
    location: '',
    category: 'VIP Experience',
    image: '',
    status: 'draft',
    capacity: 100,
    tiers: [
      { name: 'General', price: 100, capacity: 50, perks: ['Basic Access'] },
      { name: 'VIP', price: 250, capacity: 30, perks: ['VIP Lounge', 'Premium Bar'] },
      { name: 'Platinum', price: 500, capacity: 20, perks: ['All VIP Benefits', 'Meet & Greet'] }
    ],
    ...event
  });

  const categories = ['VIP Experience', 'Festival', 'Corporate', 'Yacht Party', 'Private Event'];
  const statuses = ['draft', 'live', 'sold-out', 'completed', 'cancelled'];

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave({
      ...formData,
      id: event?.id || Date.now().toString(),
      createdAt: event?.createdAt || new Date().toISOString()
    });
  };

  const updateTier = (index, field, value) => {
    const newTiers = [...formData.tiers];
    newTiers[index] = { ...newTiers[index], [field]: value };
    setFormData({ ...formData, tiers: newTiers });
  };

  return (
    <div className="max-w-4xl mx-auto">
      <div className="flex items-center justify-between mb-8">
        <h2 className="text-2xl font-bold text-white">
          {event ? 'Edit Event' : 'Create New Event'}
        </h2>
        <button onClick={onCancel} className="p-2 text-gray-400 hover:text-white">
          <X className="w-6 h-6" />
        </button>
      </div>

      <form onSubmit={handleSubmit} className="space-y-8">
        {/* Basic Information */}
        <div className="card-luxury">
          <h3 className="text-lg font-semibold text-white mb-6">Basic Information</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-400 mb-2">Event Title</label>
              <input
                type="text"
                value={formData.title}
                onChange={(e) => setFormData({...formData, title: e.target.value})}
                className="w-full px-4 py-3 bg-background border border-gray-700 rounded-lg focus:border-primary focus:outline-none transition-colors text-white"
                placeholder="e.g., Sunset Yacht Gala"
                required
              />
            </div>
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-400 mb-2">Subtitle</label>
              <input
                type="text"
                value={formData.subtitle}
                onChange={(e) => setFormData({...formData, subtitle: e.target.value})}
                className="w-full px-4 py-3 bg-background border border-gray-700 rounded-lg focus:border-primary focus:outline-none transition-colors text-white"
                placeholder="Short description or tagline"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-400 mb-2">Category</label>
              <select
                value={formData.category}
                onChange={(e) => setFormData({...formData, category: e.target.value})}
                className="w-full px-4 py-3 bg-background border border-gray-700 rounded-lg focus:border-primary focus:outline-none transition-colors text-white"
              >
                {categories.map(cat => (
                  <option key={cat} value={cat}>{cat}</option>
                ))}
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-400 mb-2">Status</label>
              <select
                value={formData.status}
                onChange={(e) => setFormData({...formData, status: e.target.value})}
                className="w-full px-4 py-3 bg-background border border-gray-700 rounded-lg focus:border-primary focus:outline-none transition-colors text-white"
              >
                {statuses.map(status => (
                  <option key={status} value={status}>{status.charAt(0).toUpperCase() + status.slice(1)}</option>
                ))}
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-400 mb-2">Date</label>
              <input
                type="date"
                value={formData.date}
                onChange={(e) => setFormData({...formData, date: e.target.value})}
                className="w-full px-4 py-3 bg-background border border-gray-700 rounded-lg focus:border-primary focus:outline-none transition-colors text-white"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-400 mb-2">Time</label>
              <input
                type="time"
                value={formData.time}
                onChange={(e) => setFormData({...formData, time: e.target.value})}
                className="w-full px-4 py-3 bg-background border border-gray-700 rounded-lg focus:border-primary focus:outline-none transition-colors text-white"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-400 mb-2">Venue</label>
              <input
                type="text"
                value={formData.venue}
                onChange={(e) => setFormData({...formData, venue: e.target.value})}
                className="w-full px-4 py-3 bg-background border border-gray-700 rounded-lg focus:border-primary focus:outline-none transition-colors text-white"
                placeholder="e.g., Royal Marina"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-400 mb-2">Location</label>
              <input
                type="text"
                value={formData.location}
                onChange={(e) => setFormData({...formData, location: e.target.value})}
                className="w-full px-4 py-3 bg-background border border-gray-700 rounded-lg focus:border-primary focus:outline-none transition-colors text-white"
                placeholder="e.g., Monaco"
                required
              />
            </div>
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-400 mb-2">Description</label>
              <textarea
                value={formData.description}
                onChange={(e) => setFormData({...formData, description: e.target.value})}
                className="w-full px-4 py-3 bg-background border border-gray-700 rounded-lg focus:border-primary focus:outline-none transition-colors text-white h-32"
                placeholder="Detailed event description..."
                required
              />
            </div>
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-400 mb-2">Event Image URL</label>
              <input
                type="url"
                value={formData.image}
                onChange={(e) => setFormData({...formData, image: e.target.value})}
                className="w-full px-4 py-3 bg-background border border-gray-700 rounded-lg focus:border-primary focus:outline-none transition-colors text-white"
                placeholder="https://example.com/image.jpg"
              />
            </div>
          </div>
        </div>

        {/* Ticket Tiers */}
        <div className="card-luxury">
          <h3 className="text-lg font-semibold text-white mb-6">Ticket Tiers</h3>
          <div className="space-y-6">
            {formData.tiers.map((tier, index) => (
              <div key={index} className="p-4 bg-gray-800/50 rounded-lg border border-gray-700">
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-400 mb-2">Tier Name</label>
                    <input
                      type="text"
                      value={tier.name}
                      onChange={(e) => updateTier(index, 'name', e.target.value)}
                      className="w-full px-3 py-2 bg-background border border-gray-700 rounded-lg focus:border-primary focus:outline-none transition-colors text-white text-sm"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-400 mb-2">Price ($)</label>
                    <input
                      type="number"
                      value={tier.price}
                      onChange={(e) => updateTier(index, 'price', parseInt(e.target.value))}
                      className="w-full px-3 py-2 bg-background border border-gray-700 rounded-lg focus:border-primary focus:outline-none transition-colors text-white text-sm"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-400 mb-2">Capacity</label>
                    <input
                      type="number"
                      value={tier.capacity}
                      onChange={(e) => updateTier(index, 'capacity', parseInt(e.target.value))}
                      className="w-full px-3 py-2 bg-background border border-gray-700 rounded-lg focus:border-primary focus:outline-none transition-colors text-white text-sm"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-400 mb-2">Perks (comma separated)</label>
                    <input
                      type="text"
                      value={tier.perks.join(', ')}
                      onChange={(e) => updateTier(index, 'perks', e.target.value.split(', '))}
                      className="w-full px-3 py-2 bg-background border border-gray-700 rounded-lg focus:border-primary focus:outline-none transition-colors text-white text-sm"
                    />
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Actions */}
        <div className="flex justify-end gap-4">
          <button
            type="button"
            onClick={onCancel}
            className="px-6 py-3 border border-gray-700 text-gray-400 rounded-lg hover:border-gray-500 transition-colors"
          >
            Cancel
          </button>
          <button type="submit" className="btn-luxury">
            <Save className="w-4 h-4 mr-2" />
            {event ? 'Update Event' : 'Create Event'}
          </button>
        </div>
      </form>
    </div>
  );
};

// Main Admin Dashboard
const AdminDashboard = () => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [activeView, setActiveView] = useState('dashboard');
  const [showEventForm, setShowEventForm] = useState(false);
  const [editingEvent, setEditingEvent] = useState(null);
  const [events, setEvents] = useState([
    {
      id: '1',
      title: 'Sunset Yacht Gala',
      subtitle: 'Exclusive evening on the Mediterranean',
      category: 'VIP Experience',
      date: '2025-12-15',
      time: '18:00',
      venue: 'Royal Marina',
      location: 'Monaco',
      status: 'live',
      image: 'https://images.unsplash.com/photo-1540979388789-6cee28a1cdc9?w=800',
      ticketsSold: 145,
      revenue: 125000,
      capacity: 200
    },
    {
      id: '2',
      title: 'Golden Hour Festival',
      subtitle: '3-day luxury music experience',
      category: 'Festival',
      date: '2025-03-20',
      time: '14:00',
      venue: 'Paradise Beach',
      location: 'Ibiza',
      status: 'live',
      image: 'https://images.unsplash.com/photo-1514525253161-7a46d19cd819?w=800',
      ticketsSold: 892,
      revenue: 445000,
      capacity: 1000
    }
  ]);

  const stats = {
    totalEvents: events.length,
    activeEvents: events.filter(e => e.status === 'live').length,
    totalRevenue: events.reduce((sum, e) => sum + (e.revenue || 0), 0),
    totalTicketsSold: events.reduce((sum, e) => sum + (e.ticketsSold || 0), 0)
  };

  const handleSaveEvent = (eventData) => {
    if (editingEvent) {
      setEvents(events.map(e => e.id === eventData.id ? eventData : e));
    } else {
      setEvents([...events, eventData]);
    }
    setShowEventForm(false);
    setEditingEvent(null);
  };

  const handleDeleteEvent = (eventId) => {
    if (confirm('Are you sure you want to delete this event?')) {
      setEvents(events.filter(e => e.id !== eventId));
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'live': return 'text-green-500 bg-green-500/10';
      case 'draft': return 'text-yellow-500 bg-yellow-500/10';
      case 'completed': return 'text-blue-500 bg-blue-500/10';
      case 'cancelled': return 'text-red-500 bg-red-500/10';
      case 'sold-out': return 'text-purple-500 bg-purple-500/10';
      default: return 'text-gray-500 bg-gray-500/10';
    }
  };

  if (!isAuthenticated) {
    return <AdminLogin onLogin={setIsAuthenticated} />;
  }

  if (showEventForm) {
    return (
      <div className="min-h-screen bg-background text-white p-6">
        <EventForm
          event={editingEvent}
          onSave={handleSaveEvent}
          onCancel={() => {
            setShowEventForm(false);
            setEditingEvent(null);
          }}
        />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background text-white">
      <div className="flex">
        {/* Sidebar */}
        <div className="w-64 min-h-screen bg-card border-r border-border p-6">
          <div className="mb-8">
            <div className="text-2xl font-bold text-luxury mb-1">be</div>
            <h2 className="text-lg font-semibold">Admin Dashboard</h2>
            <p className="text-sm text-gray-400">Event Management</p>
          </div>

          <nav className="space-y-2">
            {[
              { id: 'dashboard', name: 'Dashboard', icon: <BarChart3 className="w-4 h-4" /> },
              { id: 'events', name: 'Events', icon: <Calendar className="w-4 h-4" /> },
              { id: 'analytics', name: 'Analytics', icon: <TrendingUp className="w-4 h-4" /> },
              { id: 'settings', name: 'Settings', icon: <Settings className="w-4 h-4" /> }
            ].map(item => (
              <button
                key={item.id}
                onClick={() => setActiveView(item.id)}
                className={`w-full flex items-center gap-3 px-4 py-3 rounded-lg transition-all duration-300 ${
                  activeView === item.id 
                    ? 'bg-primary text-black font-semibold' 
                    : 'hover:bg-gray-800 text-gray-300'
                }`}
              >
                {item.icon}
                {item.name}
              </button>
            ))}
          </nav>

          <div className="mt-8 p-4 bg-primary/10 rounded-lg border border-primary/30">
            <button
              onClick={() => setIsAuthenticated(false)}
              className="w-full text-sm text-red-400 hover:text-red-300 transition-colors"
            >
              Sign Out
            </button>
          </div>
        </div>

        {/* Main Content */}
        <div className="flex-1 p-8">
          {activeView === 'dashboard' && (
            <div className="space-y-8">
              <div className="flex justify-between items-center">
                <h1 className="text-3xl font-bold">Dashboard Overview</h1>
                <button
                  onClick={() => setShowEventForm(true)}
                  className="btn-luxury"
                >
                  <Plus className="w-5 h-5 mr-2" />
                  Create Event
                </button>
              </div>

              {/* Stats Grid */}
              <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div className="card-luxury">
                  <div className="flex items-center justify-between mb-4">
                    <Calendar className="w-8 h-8 text-primary" />
                    <TrendingUp className="w-4 h-4 text-green-500" />
                  </div>
                  <h3 className="text-2xl font-bold">{stats.totalEvents}</h3>
                  <p className="text-sm text-gray-400">Total Events</p>
                </div>
                <div className="card-luxury">
                  <div className="flex items-center justify-between mb-4">
                    <Sparkles className="w-8 h-8 text-primary" />
                    <span className="text-xs bg-green-500/20 text-green-500 px-2 py-1 rounded-full">Live</span>
                  </div>
                  <h3 className="text-2xl font-bold">{stats.activeEvents}</h3>
                  <p className="text-sm text-gray-400">Active Events</p>
                </div>
                <div className="card-luxury">
                  <div className="flex items-center justify-between mb-4">
                    <DollarSign className="w-8 h-8 text-primary" />
                    <TrendingUp className="w-4 h-4 text-green-500" />
                  </div>
                  <h3 className="text-2xl font-bold">${stats.totalRevenue.toLocaleString()}</h3>
                  <p className="text-sm text-gray-400">Total Revenue</p>
                </div>
                <div className="card-luxury">
                  <div className="flex items-center justify-between mb-4">
                    <Users className="w-8 h-8 text-primary" />
                    <span className="text-xs bg-primary/20 text-primary px-2 py-1 rounded-full">Sold</span>
                  </div>
                  <h3 className="text-2xl font-bold">{stats.totalTicketsSold.toLocaleString()}</h3>
                  <p className="text-sm text-gray-400">Tickets Sold</p>
                </div>
              </div>

              {/* Recent Events */}
              <div className="card-luxury">
                <div className="flex justify-between items-center mb-6">
                  <h2 className="text-xl font-semibold">Recent Events</h2>
                  <button
                    onClick={() => setActiveView('events')}
                    className="text-primary hover:text-accent transition-colors text-sm"
                  >
                    View All →
                  </button>
                </div>
                <div className="space-y-4">
                  {events.slice(0, 3).map(event => (
                    <div key={event.id} className="flex items-center justify-between p-4 bg-gray-800/50 rounded-lg">
                      <div className="flex items-center gap-4">
                        <img 
                          src={event.image} 
                          alt={event.title}
                          className="w-16 h-16 rounded-lg object-cover"
                        />
                        <div>
                          <h3 className="font-semibold text-white">{event.title}</h3>
                          <p className="text-sm text-gray-400">{event.date} • {event.location}</p>
                          <span className={`text-xs px-2 py-1 rounded-full ${getStatusColor(event.status)}`}>
                            {event.status}
                          </span>
                        </div>
                      </div>
                      <div className="text-right">
                        <p className="font-semibold">{event.ticketsSold}/{event.capacity}</p>
                        <p className="text-sm text-gray-400">Tickets</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeView === 'events' && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h1 className="text-3xl font-bold">Event Management</h1>
                <button
                  onClick={() => setShowEventForm(true)}
                  className="btn-luxury"
                >
                  <Plus className="w-5 h-5 mr-2" />
                  Create New Event
                </button>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
                {events.map(event => (
                  <div key={event.id} className="card-luxury">
                    <img 
                      src={event.image} 
                      alt={event.title}
                      className="w-full h-48 object-cover rounded-lg mb-4"
                    />
                    <div className="space-y-3">
                      <div className="flex justify-between items-start">
                        <div>
                          <h3 className="text-lg font-semibold text-white">{event.title}</h3>
                          <p className="text-sm text-gray-400">{event.subtitle}</p>
                        </div>
                        <span className={`text-xs px-2 py-1 rounded-full ${getStatusColor(event.status)}`}>
                          {event.status}
                        </span>
                      </div>
                      
                      <div className="text-sm text-gray-400 space-y-1">
                        <div className="flex items-center gap-2">
                          <Calendar className="w-4 h-4" />
                          {event.date} at {event.time}
                        </div>
                        <div className="flex items-center gap-2">
                          <MapPin className="w-4 h-4" />
                          {event.venue}, {event.location}
                        </div>
                      </div>

                      <div className="grid grid-cols-2 gap-4 py-3 border-t border-gray-700">
                        <div className="text-center">
                          <p className="text-lg font-bold text-primary">{event.ticketsSold || 0}</p>
                          <p className="text-xs text-gray-400">Tickets Sold</p>
                        </div>
                        <div className="text-center">
                          <p className="text-lg font-bold text-primary">${(event.revenue || 0).toLocaleString()}</p>
                          <p className="text-xs text-gray-400">Revenue</p>
                        </div>
                      </div>

                      <div className="flex gap-2">
                        <button
                          onClick={() => {
                            setEditingEvent(event);
                            setShowEventForm(true);
                          }}
                          className="flex-1 py-2 bg-primary text-black rounded-lg hover:bg-accent transition-colors font-semibold text-sm"
                        >
                          <Edit className="w-4 h-4 mr-1 inline" />
                          Edit
                        </button>
                        <button className="p-2 border border-gray-700 rounded-lg hover:border-primary transition-colors">
                          <Eye className="w-4 h-4" />
                        </button>
                        <button 
                          onClick={() => handleDeleteEvent(event.id)}
                          className="p-2 border border-red-700 text-red-500 rounded-lg hover:border-red-500 transition-colors"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {activeView === 'analytics' && (
            <div className="space-y-6">
              <h1 className="text-3xl font-bold">Analytics & Reports</h1>
              <div className="card-luxury text-center py-12">
                <BarChart3 className="w-16 h-16 text-gray-600 mx-auto mb-4" />
                <h3 className="text-xl font-semibold text-white mb-2">Analytics Dashboard</h3>
                <p className="text-gray-400">Advanced analytics and reporting features coming soon.</p>
              </div>
            </div>
          )}

          {activeView === 'settings' && (
            <div className="space-y-6">
              <h1 className="text-3xl font-bold">Settings</h1>
              
              {/* Admin Settings */}
              <div className="card-luxury">
                <h3 className="text-lg font-semibold text-white mb-6">Admin Settings</h3>
                <div className="space-y-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-400 mb-2">Website Title</label>
                    <input
                      type="text"
                      defaultValue="Boujee Events"
                      className="w-full px-4 py-3 bg-background border border-gray-700 rounded-lg focus:border-primary focus:outline-none transition-colors text-white"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-400 mb-2">Company Email</label>
                    <input
                      type="email"
                      defaultValue="admin@boujeevents.com"
                      className="w-full px-4 py-3 bg-background border border-gray-700 rounded-lg focus:border-primary focus:outline-none transition-colors text-white"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-400 mb-2">Default Event Capacity</label>
                    <input
                      type="number"
                      defaultValue="100"
                      className="w-full px-4 py-3 bg-background border border-gray-700 rounded-lg focus:border-primary focus:outline-none transition-colors text-white"
                    />
                  </div>
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="font-medium text-white">Email Notifications</p>
                      <p className="text-sm text-gray-400">Receive notifications for new bookings</p>
                    </div>
                    <input type="checkbox" defaultChecked className="toggle" />
                  </div>
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="font-medium text-white">Auto-publish Events</p>
                      <p className="text-sm text-gray-400">Automatically set new events to live</p>
                    </div>
                    <input type="checkbox" className="toggle" />
                  </div>
                </div>
                <button className="btn-luxury mt-6">
                  <Save className="w-4 h-4 mr-2" />
                  Save Settings
                </button>
              </div>

              {/* Security Settings */}
              <div className="card-luxury">
                <h3 className="text-lg font-semibold text-white mb-6">Security</h3>
                <div className="space-y-4">
                  <button className="w-full text-left py-3 border-b border-gray-800 hover:text-primary transition-colors">
                    Change Admin Password
                  </button>
                  <button className="w-full text-left py-3 border-b border-gray-800 hover:text-primary transition-colors">
                    Two-Factor Authentication
                  </button>
                  <button className="w-full text-left py-3 hover:text-primary transition-colors">
                    Download Backup Data
                  </button>
                </div>
              </div>

              {/* API Access */}
              <div className="card-luxury">
                <h3 className="text-lg font-semibold text-white mb-6">API Access</h3>
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-400 mb-2">API Key</label>
                    <div className="flex gap-2">
                      <input
                        type="text"
                        value="bje_live_sk_1234567890abcdef"
                        readOnly
                        className="flex-1 px-4 py-3 bg-background border border-gray-700 rounded-lg text-white"
                      />
                      <button className="px-4 py-3 bg-primary text-black rounded-lg hover:bg-accent transition-colors">
                        <Copy className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                  <p className="text-sm text-gray-400">Use this API key to integrate with external systems</p>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// Export with URL protection
const ProtectedAdminDashboard = () => {
  // Check if accessing correct admin URL
  const currentPath = window.location.pathname;
  const validAdminPaths = ['/admin-dashboard-2025', '/admin', '/dashboard'];
  
  if (!validAdminPaths.includes(currentPath)) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-4xl font-bold text-white mb-4">404</h1>
          <p className="text-gray-400">Page not found</p>
          <a href="/" className="text-primary hover:text-accent transition-colors">
            Return to Home
          </a>
        </div>
      </div>
    );
  }

  return <AdminDashboard />;
};

export default ProtectedAdminDashboard;
